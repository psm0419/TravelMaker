<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="festival_mapper">

	<select id="getFestivalById" resultType="Festival"
		parameterType="int">
		SELECT *
		FROM festival
		WHERE festival_id = #{festivalId}
	</select>

	<select id="findFestivalList" resultType="Festival">
		SELECT *
		FROM festival
		order by festival_id
	</select>

	<update id="updatefestival" parameterType="Festival">
		update festival
		set
		festival_name = #{festivalName},
		location = #{location},
		start_date = #{startDate},
		end_date = #{endDate},
		entrance_fee = #{entranceFee},
		tel = #{tel},
		festival_host = #{festivalHost},
		homepage_url = #{homepageUrl},
		content = #{content},
		like_count = #{likeCount}
		WHERE festival_id = #{festivalId}
	</update>

	<select id="findImagesByFestivalId" parameterType="int"
		resultType="FestivalImage">
		SELECT
		image_id as imageId,
		festival_id as festivalId,
		file_path as filePath,
		file_name as fileName,
		mime_type as mimeType,
		uploaded_at as uploadedAt
		FROM festival_images
		WHERE festival_id =
		#{festivalId}
	</select>

	<select id="getRandomFestivalImages" parameterType="int"
		resultType="FestivalImage">
		SELECT *
		FROM festival_images
		FETCH FIRST #{count} ROWS ONLY
	</select>

	<insert id="saveFestival" parameterType="Festival">
		insert into festival
		(festival_id, festival_name, location, start_date,
		end_date,
		entrance_fee, tel, festival_host, homepage_url,content)
		values
		(festival_id_seq.nextval,
		#{festivalName},
		#{location},
		#{startDate},
		#{endDate},
		#{entranceFee},
		#{tel},
		#{festivalHost},
		#{homepageUrl},
		#{content})
	</insert>

	<delete id="removeFestival" parameterType="int">
		DELETE FROM festival
		WHERE festival_id = #{festivalId}
	</delete>

	<select id="searchFestivals" resultType="Festival">
		SELECT *
		FROM festival
		WHERE festival_name LIKE #{searchQuery} or location LIKE
		#{searchQuery} or
		entrance_fee LIKE #{searchQuery}
		ORDER BY festival_id
	</select>

	<!-- 사용자가 특정 축제에 대해 좋아요를 눌렀는지 확인 -->
	<select id="isUserLikedFestival" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM festival_likes
		WHERE user_id = #{userId}
		AND festival_id = #{festivalId}
	</select>

	<!-- 좋아요 추가 -->
	<insert id="addLike" parameterType="map">
		INSERT INTO festival_likes
		(like_id, user_id, festival_id, liked_at)
		VALUES
		(festival_likes_seq.nextval, #{userId}, #{festivalId}, SYSDATE)
	</insert>

	<delete id="removeLike" parameterType="map">
		DELETE FROM festival_likes
		WHERE user_id = #{userId} AND festival_id = #{festivalId}
	</delete>

	<!-- 좋아요 개수 조회 -->
	<select id="getLikeCount" parameterType="int" resultType="int">
		SELECT
		COUNT(*)
		FROM festival_likes
		WHERE festival_id = #{festivalId}
	</select>

	<!-- festival 테이블의 like_count 업데이트 -->
	<update id="updateLikeCount" parameterType="map">
		UPDATE festival
		SET
		like_count = #{likeCount}
		WHERE festival_id = #{festivalId}
	</update>

	<!-- 사용자가 즐겨찾기한 축제 목록 조회 -->
	<select id="getBookmarkedFestivals" parameterType="String"
		resultType="Festival">
		SELECT f.*
		FROM festival f
		JOIN festival_likes fl ON
		f.festival_id = fl.festival_id
		WHERE fl.user_id = #{userId}
		ORDER BY
		fl.liked_at DESC
	</select>

	<!-- 사용자의 즐겨찾기 개수 조회 -->
	<select id="getBookMarkCount" parameterType="String"
		resultType="int">
		SELECT COUNT(*)
		FROM festival_likes
		WHERE user_id = #{userId}
	</select>

</mapper>
